import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { transformJsonDataToTableData } from "../../App"
import { RootState } from "../../app/store"
import { Headers, Rows } from "../../components/Table"
import { fetchDataFromJSON } from "../hierarchyTable/hierarchyTableAPI"
import { removeRow } from "../../utils/utils"

export type HierarchyTableState = {
  data: { headers: Headers; rows: Rows }
  status: "idle" | "loading" | "failed"
}

const initialState: HierarchyTableState = {
  data: { headers: [], rows: [] },
  status: "idle",
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchDataAsync = createAsyncThunk(
  "hierarchyTable/fetchData",
  async (url: string) => {
    const data = await fetchDataFromJSON(url)
    // The value we return becomes the `fulfilled` action payload
    return data
  },
)

export const hierarchyTableSlice = createSlice({
  name: "hierarchyTable",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    deleteRow: (state, action: PayloadAction<{ rowId: string }>) => {
      //removeRow(state.data.rows, action.payload.rowId)
      state.data.rows = removeRow(state.data.rows, action.payload.rowId)
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchDataAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(fetchDataAsync.fulfilled, (state, action) => {
        state.status = "idle"
        const tableData = transformJsonDataToTableData(action.payload)
        state.data = tableData
      })
      .addCase(fetchDataAsync.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { deleteRow } = hierarchyTableSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.hierarchyTable.value)`
export const selectRows = (state: RootState) => state.hierarchyTable.data.rows
export const selectHeaders = (state: RootState) =>
  state.hierarchyTable.data.headers
export const selectStatus = (state: RootState) => state.hierarchyTable.status
export const selectTableData = (state: RootState) => state.hierarchyTable.data

export default hierarchyTableSlice.reducer
